{"version":3,"sources":["components/Photo.js","components/PhotoModal.js","components/PhotosList.js","App.js","serviceWorker.js","index.js"],"names":["Photo","React","Component","props","state","hovered","modalOpen","handleMouseEnter","bind","handleMouseLeave","openPhotoModal","closePhotoModal","this","setState","event","target","classList","contains","url","index","handleLoad","style","backgroundColor","borderRadius","cursor","color","display","justifyContent","alignItems","className","src","objectFit","loading","onLoad","onError","PhotosList","urls","i","push","console","log","oldUrls","newUrls","JSON","parse","stringify","test","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","height","width","position","zIndex","opacity","paddingTop","flexDirection","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAgGeA,GC7FUC,IAAMC,U,kDDG7B,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAS,EACTC,WAAW,GAGb,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBAXN,E,+DAgBjBI,KAAKC,SAAS,CACZR,SAAS,M,yCAKXO,KAAKC,SAAS,CACZR,SAAS,M,qCAKES,GACTA,EAAMC,OAAOC,UAAUC,SAAS,gBAClCL,KAAKC,SAAS,CACZP,WAAW,M,sCAKDQ,GACVA,EAAMC,OAAOC,UAAUC,SAAS,iBAClCL,KAAKC,SAAS,CACZP,WAAW,M,+BAKP,IAAD,EAC4BM,KAAKT,MAAhCe,EADD,EACCA,IAAKC,EADN,EACMA,MAAOC,EADb,EACaA,WADb,EAEwBR,KAAKR,MAF7B,EAECE,UAFD,EAEYD,QA2BlB,OACK,6BAES,KAAPa,EACA,yBAAKG,MApBI,CACfC,gBAAiB,OACjBC,aAAc,MACdC,OAAQ,UACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAagBC,UAAU,SAAhC,mBAGA,yBAAKC,IAAKZ,EAAKG,MA7BN,CACfU,UAAW,QACXR,aAAc,MACdC,OAAQ,WA0B8BK,UAAU,QAAQG,QAAQ,OAAOC,OAAQ,kBAAMb,EAAWD,IAAQe,QAAS,kBAAMd,EAAWD,W,GAlFpHlB,IAAMC,YE0FXiC,E,kDAtFb,WAAYhC,GAAQ,IAAD,sBACjB,cAAMA,GAGN,IADA,IAAMiC,EAAO,GACJC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAL,KALe,OAOjBF,EAAK,GAAK,aAEV,EAAKhC,MAAQ,CACXgC,QAGF,EAAKhB,WAAa,EAAKA,WAAWZ,KAAhB,gBAbD,E,uDAgBR6B,GACTE,QAAQC,IAAIH,GAEZ,IAAMI,EAAU7B,KAAKR,MAAMgC,KACrBM,EAAUC,KAAKC,MAAMD,KAAKE,UAAUJ,IAC1CC,EAAQL,EAAI,GAAZ,cAAwBA,EAAI,EAA5B,SACAzB,KAAKC,SAAS,CACZuB,KAAMM,M,+BAIA,IAAD,OAECN,EAASxB,KAAKR,MAAdgC,KAuBFU,EAAO,CACXC,gBAAgB,OAAD,OAtBK,YAsBL,KACfC,eAAgB,QAChBC,mBAAoB,SACpBC,iBAAkB,YAClBC,qBAAsB,SACtBC,OAAQ,QACRC,MAAO,QACPC,SAAU,QACVC,OAAQ,KACRC,QAAS,OAMX,OACI,6BACE,yBAAKnC,MAAOyB,IACZ,yBAAKzB,MAhCkB,CAC3BoC,WAAY,QACZ/B,QAAS,OACTgC,cAAe,SACf9B,WAAY,WA6BLQ,EAAKuB,KAAI,SAACzC,EAAKmB,GAAN,OACR,kBAAC,EAAD,CACEuB,IAAKvB,EACLlB,MAAOkB,EACPnB,IAAKA,EACLE,WAAY,EAAKA,sB,GA/ERnB,IAAMC,WCGhB2D,MANf,WACE,OACI,kBAAC,EAAD,OCOcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.937cae26.chunk.js","sourcesContent":["import React from 'react';\n\nimport PhotoModal from './PhotoModal';\n\nclass Photo extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false,\n      modalOpen: false,\n    };\n\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.openPhotoModal = this.openPhotoModal.bind(this);\n    this.closePhotoModal = this.closePhotoModal.bind(this);\n\n  }\n\n  handleMouseEnter() {\n    this.setState({\n      hovered: true,\n    });\n  }\n\n  handleMouseLeave() {\n    this.setState({\n      hovered: false,\n    });\n  }\n\n\n  openPhotoModal(event) {\n    if (event.target.classList.contains('openOnClick')) {\n      this.setState({\n        modalOpen: true,\n      });\n    }\n  }\n\n  closePhotoModal(event) {\n    if (event.target.classList.contains('closeOnClick')) {\n      this.setState({\n        modalOpen: false,\n      });\n    }\n  }\n\n  render() {\n    const { url, index, handleLoad } = this.props;\n    const { modalOpen, hovered } = this.state;\n\n\n\n\n    const imgStyle = {\n      objectFit: 'cover',\n      borderRadius: '5px',\n      cursor: 'pointer',\n    };\n\n    const divStyle = {\n      backgroundColor: '#ddd',\n      borderRadius: '5px',\n      cursor: 'pointer',\n      color: '#bbb',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    };\n\n\n\n\n\n\n\n     return (\n          <div>\n          {\n            url == '#' ?\n            <div style={divStyle} className=\"photo\">\n              Loading Slug...\n            </div> :\n            <img src={url} style={imgStyle} className=\"photo\" loading=\"lazy\" onLoad={() => handleLoad(index)} onError={() => handleLoad(index)}/>\n          }\n          </div>\n     );\n\n\n\n  }\n}\n\nexport default Photo;\n","import React from 'react';\n\n\nclass PhotoModal extends React.Component {\n\n\n  render() {\n    const { url, closePhotoModal } = this.props;\n\n\n    const modalContainerStyle = {\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      width: '100vw',\n      height: '100vh',\n      backgroundColor: 'rgb(0, 0, 0, 0.5)',\n      zIndex: '4',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'default',\n    };\n    const modalStyle = {\n      width: '940px',\n      margin: '50px',\n      backgroundColor: 'blue',\n      height: '400px',\n      display: 'flex',\n    };\n    const photoContainerStyle = {\n      flexGrow: '1',\n      backgroundColor: '#000',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    };\n    const imgStyle={\n      maxWidth: '100%',\n      maxHeight: '100%',\n    };\n    const infoContainerStyle = {\n      minWidth: '250px',\n      backgroundColor: '#fff',\n      display: 'flex',\n      flexDirection: 'column',\n    };\n    const topInfoContainer = {\n      borderBottom: '1px solid #ccc',\n      padding: '10px'\n    };\n    const flexParent = {\n      display: 'flex',\n      alignItems: 'center',\n    }\n\n    const photoStyle = {\n      width: '40px',\n      height: '40px',\n      borderRadius: '50%',\n      cursor: 'pointer',\n      backgroundImage: `url(${url})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    };\n\n    const timeAgoStyle = {\n      fontSize: '10px',\n    };\n    const usernameStyle = {\n      flexGrow: '1',\n      fontSize: '12px',\n      margin: '0px 10px',\n      overflowX: 'scroll',\n    };\n    const pointerStyle = {\n      cursor: 'pointer',\n    };\n    const dotdotdotStyle = {\n      cursor: 'pointer',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: '5px',\n    };\n    const bottomInfoContainerStyle = {\n      flexGrow: '1',\n    };\n\n    //TODO TO DO what is username is like 16 Ws? it wont fit. I added scroll already. DONE?\n    return (\n      <div style={modalContainerStyle} class=\"closeOnClick\" onClick={closePhotoModal}>\n        <div style={modalStyle}>\n          <div style={photoContainerStyle}>\n            <img src={url} style={imgStyle} />\n          </div>\n          <div style={infoContainerStyle}>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PhotoModal;\n","import React from 'react';\n\nimport Photo from './Photo';\n\n\n\nclass PhotosList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const urls = [];\n    for (let i = 1; i < 306; i++) {\n      urls.push(`#`);\n    }\n    urls[0] = 'img/1.jpeg';\n\n    this.state = {\n      urls\n    };\n\n    this.handleLoad = this.handleLoad.bind(this);\n  }\n\n  handleLoad(i) {\n    console.log(i);\n\n    const oldUrls = this.state.urls;\n    const newUrls = JSON.parse(JSON.stringify(oldUrls));\n    newUrls[i + 1] = `img/${i + 2}.jpeg`;\n    this.setState({\n      urls: newUrls\n    });\n  }\n\n  render() {\n\n    const { urls } = this.state;\n\n    const backgroundUrl = 'img/a.jpg';\n\n    // const urls = [];\n    // for (let i = 1; i < 306; i++) {\n    //   urls.push(`img/${i}.jpeg`);\n    // }\n\n\n    const photosContainerStyle = {\n      paddingTop: '100px',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      // backgroundImage: `url(${backgroundUrl})`,\n      // backgroundSize: 'cover',\n      // backgroundPosition: 'center',\n      // backgroundRepeat: 'no-repeat',\n      // backgroundAttachment: 'fixed',\n\n    };\n\n    const test = {\n      backgroundImage: `url(${backgroundUrl})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundAttachment: 'scroll',\n      height: '100vh',\n      width: '100vw',\n      position: 'fixed',\n      zIndex: '-5',\n      opacity: '0.6',\n    };\n\n\n\n\n    return (\n        <div>\n          <div style={test}></div>\n          <div style={photosContainerStyle}>\n            {urls.map((url, i) => (\n              <Photo\n                key={i}\n                index={i}\n                url={url}\n                handleLoad={this.handleLoad}/>\n            ))}\n          </div>\n        </div>\n\n    );\n  }\n}\n\nexport default PhotosList;\n","import React from 'react';\nimport PhotosList from './components/PhotosList';\n\nfunction App() {\n  return (\n      <PhotosList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}